#!/usr/lib/python3

import unittest


def suite():
	suite = unittest.TestSuite()
	suite.addTest(TestCase1('Test d'un fonctionnement normal')
	suite.addTest(TestCase2('Test d'un fonctionnement imbriquÃ©')
	return suite
		
if __name__ == '__main__':
	runner = unittest.TextTestRunner()
	runner.run(suite())


class TestCase1(unittest.TestCase):

	@classmethod
	def setUpClass(cls):
		file = open("test.file", "r")
		
	def setUp(self):
		line = file.readline().split("\", 1)[1]
		

	def test_Mouvement_detecte(self):
		msg = "Mouvement_detecte"
		self.assertEqual(line, msg)
		
		
	def test_Mouvement_termine(self):
		msg = "Mouvement_termine"
		self.assertEqual(line, msg)
		

	def test_Son_detecte(self):
		msg = "Son_detecte"
		self.assertEqual(line, msg)
		
		
	def test_Son_termine(self):
		msg = "Son_termine"
		self.assertEqual(line, msg)
	
	@classmethod
	def tearDownClass(cls):
		file.close()
	
	
class TestCase1(unittest.TestCase):

	@classmethod
	def setUpClass(cls):
		file = open("test.file", "r")
		
	def setUp(self):
		line = file.readline().split("\", 1)[1]
		
		
	def test_Son_detecte(self):
		msg = "Son_detecte"
		self.assertEqual(line, msg)
		

	def test_Mouvement_detecte(self):
		msg = "Mouvement_detecte"
		self.assertEqual(line, msg)
		
		
	def test_Son_termine(self):
		msg = "Son_termine"
		self.assertEqual(line, msg)
		
		
	def test_Mouvement_termine(self):
		msg = "Mouvement_termine"
		self.assertEqual(line, msg)
	
	
	@classmethod
	def tearDownClass(cls):
		file.close()
	


